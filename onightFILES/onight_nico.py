import sys, os
import numpy as np

def number_to_string(number, dtype):
    
    #sign
    str_sign=''
    if number < 0.: str_sign='-'

    number=np.abs(number)

    if dtype == 'dp':
        if number == 0.:
            str_all = '0.d0'            
        elif number > 1.:
            iexp=0
            fdum=1.
            for i in np.arange(1,100):
                if number/fdum < 10.: break
                fdum = fdum*10.
                iexp = iexp+1
            number = number/fdum
            str_all = str_sign + '{number:}'.format(number=number) + 'd{iexp:}'.format(iexp=iexp)
        elif number < 1.:
            iexp = 0
            fdum=1.
            for i in np.arange(1,100):
                if number*fdum > 0.1: break
                fdum = fdum*10.
                iexp = iexp-1
            number = number*fdum*10.  #this weird formalism only to have a nice representation of numbers after the comma
            iexp=iexp-1
            str_all = str_sign + '{number:}'.format(number=number) + 'd{iexp:}'.format(iexp=iexp)
        else:
            number = '1.'
            iexp = 0
            str_all = str_sign + '1.d0'

    elif dtype == 'int':
        str_all = str_sign + '{number:}'.format(number=number)
    else:
        exit('error in number_to_string: dtype not properly specified')
        
    return str_all
#
#-------------------------------------------------------------
#-------------------------------------------------------------
#-------------------------------------------------------------
#
def copy_to_directory(dir_out):
    #
    print('########### copy to output directory ##################')
    print('output_dir: ', dir_out)
    print()


    command01 = 'mv output_spec.log ' + dir_out
    command02 = 'mv output_model.log ' + dir_out    
    command03 = 'mv output_modelspec.log ' + dir_out
    command04 = 'cp modelspec.eo ' + dir_out
    command05 = 'cp spec.eo ' + dir_out
    command06 = 'cp model.eo ' + dir_out    
    command07 = 'cp indat_sc3d_nico.nml ' + dir_out    
    command08 = 'cp indat_modelspec_nico.nml ' + dir_out
    command09 = 'cp indat_spec_nico.nml ' + dir_out
    command10 = 'mv ./outputFILES/nico_wr3d/spec_surface* ' + dir_out
    command11 = 'mv ./outputFILES/nico_wr3d/FLUXEM* ' + dir_out    

    print(command01)
    print(command02)
    print(command03)
    print(command04)
    print(command05)
    print(command06)
    print(command07)
    print(command08)
    print(command09)
    print(command10)
    print(command11)    

    os.system(command01)
    os.system(command02)
    os.system(command03)
    os.system(command04)
    os.system(command05)
    os.system(command06)
    os.system(command07)
    os.system(command08)
    os.system(command09)
    os.system(command10)
    os.system(command11)

    print('done')
    print()
#
#------------------------------------------------------------------
#
def copy_fname(fname_base,
               isnap_min=40,
               isnap_max=40):

    print('########### copying file from STER ####################')
    print()


    for isnap in np.arange(isnap_min,isnap_max+1):
        fname = fname_base + '_{isnap:04d}.dat'.format(isnap=isnap)

        fname_in='/STER/levin/models_nico/models/nico_wr3d/' + fname
        fname_out='./models/nico_wr3d/'+fname

        command01 = 'cp ' + fname_in + ' ' + fname_out
        print(command01)
        os.system(command01)
    print()        
   
def delete_fname(fname_base,
                 isnap_min=40,
                 isnap_max=40):
    print('########### deleting local model file #################')
    print()
    
    for isnap in np.arange(isnap_min,isnap_max+1):
        fname = fname_base + '_{isnap:04d}.dat'.format(isnap=isnap)

        fname_out='./models/nico_wr3d/'+fname

        command01 = 'rm ' + fname_out
        print(command01)
        os.system(command01)
    print()        
#
#------------------------------------------------------------------
#   
def set_indat_spec(fname='indat_spec_nico_test.nml', vmicro=None, opt_surface=False, irun=None):

    lerr=False
    if vmicro == None: lerr=True
    if lerr: exit('error in set_indat_spec: argument not specified')

    vmicro_str = number_to_string(vmicro, 'dp')
    if opt_surface:
        opt_surface_str='t'
    else:
        opt_surface_str='f'
        
    print('########### setting indat file ########################')
    print('output_file: ' + fname)
    print('')

    file = open(fname, "w")
    file.write("&input_options\n")
    file.write("input_mod = 2                                   ! 0 - 1D model ; 2 - 3D Cartesian model ; 2 - 3D Spherical model\n")
    file.write("input_file = './outputFILES/nico_wr3d/modspec_model00.h5'  ! name of input file - generated by modelspec.eo\n")
    file.write("output_dir = './outputFILES/nico_wr3d'                    ! output directory \n")
    file.write("opt_photprof = 0                                ! Photospheric profile: 0 - Plank illumination ; 1 - from Herrero ; 2 - from Kuricz  (not active)\n")
    file.write("opt_obsdir_read = t                             ! Observers direction: t - from file in_alpha/gamma.dat; f - equidistant (see below \alpha , \gamma)\n")
    file.write("opt_surface = " + opt_surface_str + "                                 ! t - to calculate surface brightness ; f - emergent fluxes \n")
    file.write("opt_int2d = f                                   ! t - intensity along the all rays ( for debugging)\n")
    file.write("opt_incl_gdark = f                              ! t - include gravity darkening \n")
    file.write("opt_incl_sdist = f                              ! t - include the surface distortion \n")
    file.write("nalpha = 1                                      ! number of alpha angles of observers direction -\n")
    file.write("ngamma = 1                                      ! number of gamma angles of observers direction - if opt_obsdir_read=f nalpha=1 alpha=0\n")
    file.write("/\n")
    file.write("\n")   
#
    file.write("&input_model\n")
    file.write("vrot = 0.d0            ! Surface rotational velocity ; also for opt_incl_gdark and opt_incl_sdist\n")
    file.write("vth_fiducial = 1.d2\n")
    file.write("vmicro = " + vmicro_str + "          ! Micro turbulent\n")
    file.write("rmin = 1.d0            ! Minimum radius as in modelspec\n")
    file.write("rmax = 10.97d0         ! Maximum radius < the one in modelspec to avoid extrapolation errors\n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&input_surface\n")
    file.write("nsurfb = 17\n")
    file.write("alpha_surface = 1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0,\n")
    file.write("                1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0,\n")
    file.write("                1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0, 1.570796d0\n")
    file.write("                1.570796d0, 1.570796d0\n")
    file.write("gamma_surface = 0.d0, 0.d0, 0.d0, 0.d0, 0.d0,\n")
    file.write("                0.d0, 0.d0, 0.d0, 0.d0, 0.d0,\n")
    file.write("                0.d0, 0.d0, 0.d0, 0.d0, 0.d0\n")
    file.write("                0.d0, 0.d0\n")
    file.write("xobs_surface = -10.d0, -8.75d0, -7.5d0, -6.25d0, -5.d0,\n")
    file.write("               -3.75d0, -2.5d0, -1.25d0, 0.d0, 1.25d0, 2.5d0,\n")
    file.write("                3.75d0, 5.d0, 6.25d0, 7.5d0, 8.25d0\n")
    file.write("                10.d0\n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&dum\n")
    file.write("/\n")
    file.write("\n")
    file.close

    print('done')
    print()


def set_indat_modelspec(fname='indat_modelspec_nico_test.nml',
                        opt_opac=0,
                        opt_scont=0,
                        opt_sline=0,
                        kcont=0.,
                        kline=0.,
                        opt_vlat=0,
                        vmicro=0.,
                        iline=11):
    #set indat_modelspec_nico.nml file


    lerr=False
    if opt_opac == None: lerr=True
    if opt_scont == None: lerr=True
    if opt_sline == None: lerr=True
    if kcont == None: lerr=True
    if kline == None: lerr=True
    if opt_vlat == None: lerr=True
    if vmicro == None: lerr=True
    if iline == None: lerr=True        
    if lerr: exit('error in set_indat_modelspec: argument not specified')

    vmicro_str = number_to_string(vmicro, 'dp')
    opt_opac_str = number_to_string(opt_opac, 'int')
    opt_scont_str = number_to_string(opt_scont, 'int')
    opt_sline_str = number_to_string(opt_sline, 'int')
    opt_vlat_str = number_to_string(opt_vlat, 'int')
    iline_str = number_to_string(iline, 'int')    
    kcont_str = number_to_string(kcont, 'dp')
    kline_str = number_to_string(kline, 'dp')      
    
    print('########### setting indat file ########################')
    print('output_file: '+ fname)
    print()

    file = open(fname, "w")
    file.write("&input_options\n")
    file.write("input_file = './outputFILES/output_model00.h5'\n")
    file.write("input_file2 = './inputFILES/model3d.h5'          ! file generated by ./model.eo \n")
    file.write("output_file = './outputFILES/nico_wr3d/modspec_model00.h5'\n")
    file.write("input_mod = 19   ! see in ./src_modelspec/modelspec.f90 \n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&input_model\n")
    file.write("teff = 258390.7d0\n")
    file.write("trad = 258390.7d0\n")
    file.write("xlogg = 3.6d0      ! Currently not used \n")
    file.write("rstar = 1.d0       ! R in R_odot\n")
    file.write("rmax = 11.d0       ! R_max in R_star\n")
    file.write("tmin = 1.d0        ! used for case of beta velocity \n")
    file.write("xmloss = 1.d-6     ! used for case of beta velocity\n")
    file.write("vmin = 10.d0       ! used for case of beta velocity in km/sec\n")
    file.write("vmax = 4.d3        ! used for case of beta velocity in km/sec\n")
    file.write("vmicro = " + vmicro_str + "      ! micro turbulence velocity in km/sec  - For full 3d hydro can be 10 ( but runs faster for higher)\n")
    file.write("vth_fiducial=1.d2\n")
    file.write("beta = 1.d0        ! used for beta law \n")
    file.write("yhe = 12.25d0        ! He number abundance N_he/N_H (12.25 corresponds to mass-fraction 0.98)\n")
    file.write("hei = 2.d0         ! number ogf free electrons per helium atom    \n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&input_line\n")
    file.write("iline = " + iline_str + "       ! case ID to set line as defined in ./scr/mod_iline.f90 - if iline=0, read from element_z, element_i, element_ll, element_lu\n")
    file.write("eps_line = 0.d0   ! thermalisation parameter  --- not used \n")
    file.write("kline = " + kline_str + "     ! line strength \n")
    file.write("kappa0 = 1.d0     ! not used \n")
    file.write("alpha = 0.d0      ! not used \n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&input_usr\n")
    file.write("opt_opac = " + opt_opac_str + "   ! 0 - continuum opacity = 0 ; 1 -  continuum opacity = OPAL ; 2 -  continuum opacity = Thomson;\n")
    file.write("opt_scont = " + opt_scont_str + "  ! 0 - source function = 0 ; 1 - source function = Planck(local) ; 2 - source function = dilution * Planck(T_rad) \n")
    file.write("opt_sline = " + opt_sline_str + "  ! 0 - line source function = 0 ; 1 - line source function = Planck(local) ; 2 - line source function = dilution * Planck(T_rad)\n")
    file.write("kcont = " + kcont_str + "   ! scaling factor to continuum opacity\n")
    file.write("opt_vlat = " + opt_vlat_str + "   ! 0 - lateral velocities  = 0 (only radial case) ; 1 - lateral velocities = from hydro (don't use)\n")    
    file.write("tfloor = 20.d3\n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&dum\n")
    file.write("/\n")

    file.close
    #
    #
    print('done')
    print()

def set_indat_model(file_base,
                    fname='indat_sc3d_nico_test.nml',                    
                    isnap_min=None,
                    isnap_max=None,                    
                    opt_bvel=None,
                    beta=None,
                    vmin=None,
                    vinf=None,
                    mdot=None):

    lerr=False
    if isnap_min == None: lerr=True
    if isnap_max == None: lerr=True
    if opt_bvel == None: lerr=True
    if beta == None: lerr=True
    if vmin == None: lerr=True
    if vinf == None: lerr=True
    if mdot == None: lerr=True    
    if lerr: exit('error in set_indat_model: argument not specified')

    isnap_min_str = number_to_string(isnap_min, 'int')
    isnap_max_str = number_to_string(isnap_max, 'int')    
    opt_bvel_str = number_to_string(opt_bvel, 'int')
    beta_str = number_to_string(beta, 'dp')
    vmin_str = number_to_string(vmin, 'dp')    
    vinf_str = number_to_string(vinf, 'dp')
    mdot_str = number_to_string(mdot, 'dp')    
    
    print('########### setting model indat file ##################')
    print('output_file: ' +fname)
    print()

    file = open(fname, "w")    
    file.write("&input_options\n")
    file.write("model_dir = 'inputFILES'                     ! Name of the output directory \n")
    file.write("output_file = 'nico_wr3d/output_model00.h5'  ! name of the output model file \n")
    file.write("input_mod = 17                               ! Model read in instruction 17 = read 3dWR (see ./src_model/model.f90); 1 -for beta law, see &input_mod_1d\n")
    file.write("input_mod_dim = 3                            ! Dimensionality of the problem 1,2,3D\n")
    file.write("spatial_grid1d = 5                         ! ! ! Below is only for Sort-Characteristic solution ! ! !\n")
    file.write("spatial_grid3d = 4\n")
    file.write("opt_opac = 0\n")
    file.write("opt_opal = 0\n")
    file.write("opt_angint_method = 9\n")
    file.write("opt_method = 1\n")
    file.write("opt_sol2d = f\n")
    file.write("opt_ltec = 1\n")
    file.write("opt_incl_cont = t\n")
    file.write("opt_start_cont = t\n")
    file.write("opt_ng_cont = t\n")
    file.write("opt_ait_cont = f\n")
    file.write("opt_incl_line = f\n")
    file.write("opt_start_line = t\n")
    file.write("opt_ng_line = t\n")
    file.write("opt_ait_line = f\n")
    file.write("opt_alo_cont = 3\n")
    file.write("opt_alo_line = 3\n")
    file.write("opt_incl_gdark = f\n")
    file.write("opt_incl_sdist = f\n")
    file.write("/\n")
    file.write("\n")
    #
    file.write("&input_mod_1d\n")
    file.write("teff = 258390.7d0\n")
    file.write("trad = 258390.7d0\n")
    file.write("xlogg = 3.6d0\n")
    file.write("rstar = 1.d0\n")
    #   file.write("rmax = 6.d0\n")
    file.write("rmax = 11.d0\n")
    file.write("tmin = 1.d0\n")
    file.write("xmloss = 1.d-6\n")
    file.write("vmin = 10.d0\n")
    file.write("vmax = 4000.d0\n")
    file.write("vmicro = 1.d2\n")
    file.write("vth_fiducial = 1.d2\n")
    file.write("vrot = 0.d0\n")
    file.write("beta = 1.d0\n")
    file.write("yhe = .98d0\n")
    file.write("hei = 2.d0\n")
    file.write("xnue0 = 1.93798d15\n")
    file.write("na = 12\n")
    file.write("/\n")
    file.write("\n")
    file.write("&input_infreg\n")
    file.write("rmin = 1.d0\n")
    file.write("rlim = 5.9d0\n")
    file.write("/\n")
    file.write("\n")
    file.write("&input_cont\n")
    file.write("eps_cont = 0.d0\n")
    file.write("kcont = 1.d0\n")
    file.write("/\n")    
    file.write("\n")
    file.write("&input_line\n")
    file.write("eps_line = 0.d0\n")
    file.write("kline = 1.d0\n")
    file.write("kappa0 = 5.d-1\n")
    file.write("alpha = 0.d0 \n")
    file.write("/\n")
    file.write("\n")
    file.write("&dimensions_1d\n")
    file.write("n1d = 27\n")
    file.write("n1d_t = 81\n")
    file.write("n1d_r = 22\n")
    file.write("delv = 0.3333333d0\n")
    file.write("/\n")
    file.write("\n")
    file.write("&dimensions_3d\n")
    file.write("ncx=19\n")
    file.write("ncy=19\n")
    file.write("ncz=19\n")
    file.write("delx_max=0.7d0\n")
    file.write("dely_max=0.7d0\n")
    file.write("delz_max=0.7d0\n")
    file.write("/\n")
    file.write("\n")
    file.write("&dimensions_freq\n")
    file.write("deltax = 0.3333333d0\n")
    file.write("xcmf_max = 3.d0\n")
    file.write("/\n")
    file.write("\n")
    file.write("&dimensions_angles\n")
    file.write("n_theta = 16\n")
    file.write("/\n")
    file.write("\n")
    file.write("&benchmark\n")
    file.write("benchmark_mod = 0\n")
    file.write("im_source = 3\n")
    file.write("im_opacity = 2\n")
    file.write("im_vel = 0\n")
    file.write("tau_min = 0.d0\n")
    file.write("tau_max = 5.d0\n")
    file.write("source_min = 0.1d0\n")
    file.write("source_max = 1.d-6\n")
    file.write("n_y = 0.d0\n")
    file.write("n_z = 0.707107d0\n")
    file.write("/\n")
    file.write("\n")

    file.write("&input_usr\n")
    strdum='models/nico_wr3d/'+file_base
    file.write("fname_model='" + strdum + "'       ! name of the input models \n")
    file.write("is_min= " + isnap_min_str + "                                                ! first snapshot \n")
    file.write("is_max= " + isnap_max_str + "                                                ! the last snapshot\n")    
    file.write("unit_length = 1.d0                                       ! unit length in units of R_\odot in hydro syms \n")
    file.write("unit_density = 2.5d-8                                    ! unit density in hydro syms\n")
    file.write("unit_velocity = 1.d8                                     ! unit velocity in hydro syms\n")
    file.write("unit_temperature = 1.d0                                  ! unit temperature in hydro syms\n")
    file.write("opt_bvel= " + opt_bvel_str + "                                               ! 0 - read hydro file ; 1 - set \beta velocity law with mdot and vinf from hydro ; 2 - set \beta velocity law with mdot and vinf from this input file\n")
    file.write("beta= " + beta_str + "                                                  ! beta value if opt_bvel=1,2\n")
    file.write("vmin= " + vmin_str + "                                                  ! vmin in km/s if opt_bvel=1,2\n")
    file.write("vinf= " + vinf_str + "                                               ! vinf in km/s if opt_bvel=2\n")
    file.write("mdot= " + mdot_str + "                                                ! mass-loss rate in msun/yr if opt_bvel=2\n")    
    file.write("max_refinement=4                                          ! refinement level of the hydro grid\n")
    file.write("nd = 512, 64, 64                                         ! resolution of the output grid \n")
    file.write("/\n")
    file.write("\n")
    file.write("&test\n")
    file.write("/\n")
    file.write("\n")
    file.write("test")
    file.close()
 
    print('done')
    print()

def run_model():
    input_file='in_sc3d'
    output_file='output_model.log'
    print('########### calculating model atmosphere ##############')
    print('input_file: ' + input_file)
    print('output_file: ' + output_file)
    command01 = 'model.eo < ' + input_file + ' > ' + output_file
    print(command01)
    os.system(command01)    
    print('done')
    print()
#
#function run_sc3d () {
#    #calculate source functions
#    input_file='in'
#    output_file='output_sc3d.log'
#    echo '######### calculating solution of source fct ##########'
#    echo 'input_file: ' $input_file
#    echo 'output_file: ' $output_file
#    sc3d.eo < $input_file > $output_file
#    echo 'done'
#    echo    
#}
##
def run_modelspec():
    #calculate model-file for final formal solution
    input_file='in_modelspec'
    output_file='output_modelspec.log'
    print('###### calculating model-file for formal solution #####')
    print('input_file: ' + input_file)
    print('output_file: ' + output_file)

    command01 = 'modelspec.eo < ' + input_file + ' > ' + output_file
    print(command01)
    os.system(command01)    
    print('done')
    print()
#
def run_spec():
    #calculate formal solution
    input_file='in_spec'
    output_file='output_spec.log'
    print('############# calculating formal solution #############')
    print('input_file: ' + input_file)
    print('output_file: ' + output_file)
    command01 = 'spec.eo < ' + input_file + ' > ' + output_file
    print(command01)
    os.system(command01)        
    print('done')
    print()
#
#run program
#
#-------------------------------------------------------------------
#
#opt_opac = 0 -> zero
#         = 1 -> opal opacities
#         = 2 -> thomson scattering
#opt_scont = 0 -> zero
#          = 1 -> planck function
#          = 2 -> dilution factor
#opt_sline = 0 -> zero
#          = 1 -> planck function
#          = 2 -> dilution factor
#opt_vlat = 0 -> only radial velocities
#         = 1 -> also theta,phi velocities

#set indat_modelspec_nico.nml file
vmicro=100.   #10.
opt_opac=2
opt_scont=1
opt_sline=1
kcont=1.0
kline=1.0    #1.e13
opt_vlat=1
opt_bvel=0
beta=20.
vmin=10.
vinf=2000.
mdot=1.e-3
opt_surface=False
iline=0  #iline=11
#
#--------------------------------------------
#
file_base='WR_3D_alpha_LTE_longbox'
#
#--------------------------------------------
#
#isnap_min=40
#isnap_max=40
#isnap = isnap_min

for isnap in np.arange(26,81):
    isnap_min = isnap
    isnap_max = isnap

    #copy snapshot(s) to working directory
    copy_fname(file_base,
               isnap_min=isnap_min,
               isnap_max=isnap_max)

    #set the model indat file
    set_indat_model(file_base,
                    fname='indat_sc3d_nico.nml',
                    isnap_min=isnap_min,
                    isnap_max=isnap_max,
                    opt_bvel=opt_bvel,
                    beta=beta,
                    vmin=vmin,
                    vinf=vinf,
                    mdot=mdot)
    
    #run the model
    run_model()

    #delete original hydro-simulation (to spare hdd space)
    delete_fname(file_base,
                 isnap_min=isnap_min,
                 isnap_max=isnap_max)


    #set the indat file for modelspec.eo
    set_indat_modelspec(fname='indat_modelspec_nico.nml',
                        opt_opac=opt_opac,
                        opt_scont=opt_scont,
                        opt_sline=opt_sline,
                        kcont=kcont,
                        kline=kline,
                        opt_vlat=opt_vlat,
                        vmicro=vmicro,
                        iline=iline)
    #
    #set the indat file for spec.eo
    set_indat_spec(fname='indat_spec_nico.nml',
                   vmicro=vmicro,
                   opt_surface=opt_surface)

    #calculate opacities, etc. and run the formal solution
    run_modelspec()    
    run_spec()

    #copy everything to an appropriate directory
#    dir_out='/lhome/levin/Postdoc/papers/paperIV/models/WR_3D_alpha_LTE_longbox/snap{isnap:}_heII4686_vmicro1d2_sresol/surface_brightness'.format(isnap=isnap)
    dir_out='/lhome/levin/Postdoc/papers/paperIV/models/WR_3D_alpha_LTE_longbox/snap{isnap:}_heII4686_vmicro1d2_sresol'.format(isnap=isnap)
    copy_to_directory(dir_out)
